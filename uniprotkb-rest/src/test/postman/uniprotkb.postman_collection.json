{
	"info": {
		"_postman_id": "e8184259-5c5d-4293-911c-52fbc4199d67",
		"name": "uniprotkb",
		"description": "Test suite for UniProtKB requests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "search",
			"item": [
				{
					"name": "Search Proteins",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15400b0f-b113-4237-9c92-58b4c3bfc93e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
									"});",
									"// verify data",
									"let jsonData = pm.response.json();",
									"utils.verifyResults(jsonData.results, ['A9Q1J6', 'P0CI25']);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{search_value}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_value}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by gene",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37217aac-bb36-4776-96a2-cb466814d71e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{search_by_gene}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_by_gene}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by gene xml",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e100690-9868-4369-8c3f-95a7974f156d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{search_value}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_value}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by gene tsv",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fda72aa-9390-4255-9d66-b5aa36f0852e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{search_value}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_value}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search by gene list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "97a5061a-b89d-4097-835c-ac83ef7aee30",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/search?query={{search_value}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_value}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Test suite for /search API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a1567669-3f62-4e1e-bb91-b6b8faa8b879",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "21126b0f-5710-4839-a609-190cfa829266",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "accession",
			"item": [
				{
					"name": "Get by accession",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "65497a2b-aeec-4f95-bc1c-12309f51303f",
								"exec": [
									"// use console.log(msg), console.info(msg), console.warn(msg), console.error(msg) ",
									"// to log various types of message on Postman Console",
									"//e.g. console.warn(\"This is a sample warning message to print on Postman console\");",
									"//e.g.console.error(\"This is a sample error message to print on Postman console\");",
									"",
									"// verify common headers",
									"let xRelease = pm.globals.get('x_release');",
									"let controlAllow = pm.globals.get('control_origin');",
									"let verifyHeaders = eval(pm.globals.get(\"verifyHeaders\"));",
									"verifyHeaders(undefined, undefined, undefined, undefined, ",
									"            undefined, undefined, xRelease, controlAllow);",
									"",
									"// X-Cache-Info - Sample code to verify a single header",
									"let verifyXCacheInfoHeader = eval(pm.globals.get(\"verifyXCacheInfoHeader\"));",
									"verifyXCacheInfoHeader();",
									"",
									"// verify data",
									"let jsonData = pm.response.json();",
									"",
									"pm.test(\"entryType\", function () {",
									"    pm.expect(jsonData.entryType).to.eql(\"UniProtKB reviewed (Swiss-Prot)\");",
									"});",
									"",
									"pm.test(\"primaryAccession\", function () {",
									"    pm.expect(jsonData.primaryAccession).to.eql(\"P12345\");",
									"});",
									"",
									"utils.verifySecondaryAccessions(jsonData.secondaryAccessions, [\"G1SKL2\"]);",
									"",
									"",
									"pm.test(\"uniProtkbId\", function () {",
									"    pm.expect(jsonData.uniProtkbId).to.eql(\"AATM_RABIT\");",
									"});",
									"",
									"// verify entryAudit",
									"var expectedFirstPublicDate = '1989-10-01';",
									"var expectedLastAnnotationUpdateDate ='2020-06-17';",
									"var expectedLastSequenceUpdateDate = '2013-09-18';",
									"var expectedEntryVersion = 126;",
									"var expectedSequenceVersion = 2;",
									"",
									"utils.verifyEntryAudit(jsonData.entryAudit, expectedFirstPublicDate, expectedLastAnnotationUpdateDate, expectedLastSequenceUpdateDate, expectedEntryVersion, expectedSequenceVersion);",
									"",
									"console.log(jsonData.annotationScore);",
									"pm.test(\"annotationScore\", function () {",
									"    pm.expect(jsonData.annotationScore).to.eql(0.0);",
									"});",
									"",
									"utils.verifyOrganism(jsonData.organism, \"Oryctolagus cuniculus\", \"Rabbit\", 9986, ",
									"[\"Eukaryota\", \"Metazoa\", \"Chordata\", \"Craniata\", \"Vertebrata\", \"Euteleostomi\", \"Mammalia\",",
									"\"Eutheria\", \"Euarchontoglires\", \"Glires\", \"Lagomorpha\", \"Leporidae\", \"Oryctolagus\"]);",
									"",
									"pm.test(\"proteinExistence\", function () {",
									"    pm.expect(jsonData.proteinExistence).to.eql(\"1: Evidence at protein level\");",
									"});",
									"",
									"pm.test(\"proteinDescription\", function () {",
									"    utils.verifyNotNull(\"proteinDescription\", jsonData.proteinDescription);",
									"});",
									"",
									"var expectedFullName = {\"value\": \"Aspartate aminotransferase, mitochondrial\"};",
									"var expectedShortNames = [{\"value\": \"mAspAT\"}];",
									"var expectedEcNumbers = [{\"value\": \"2.6.1.1\"},{\"value\": \"2.6.1.7\"}];",
									"utils.verifyProteinName(\"recommendedName\", jsonData.proteinDescription.recommendedName,  ",
									"    expectedFullName, expectedShortNames, expectedEcNumbers);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accession/{{accession}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"accession",
								"{{accession}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Test suite for /accession/{accession} API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "823fedaa-ee6e-406e-9b24-37d2b3398fdc",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "c19e960b-9d8f-4124-8de1-709326268a88",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "accessions",
			"item": [
				{
					"name": "Get Proteins by accession list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b0d5dc9-283c-4dec-b30f-f823477cc0a9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/accessions?accessions={{accession_list}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"accessions"
							],
							"query": [
								{
									"key": "accessions",
									"value": "{{accession_list}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Test suite for /accessions API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9d00a728-6cb9-40f8-b062-551939b2b4cf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e7c9437c-ad4a-4804-ac86-612bac1ee247",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "stream",
			"item": [
				{
					"name": "Stream Proteins",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13c26bb8-9968-46fd-b9be-24d2a062c04b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/{{path_context}}/{{uniprotkb_path}}/stream?query={{search_value}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{path_context}}",
								"{{uniprotkb_path}}",
								"stream"
							],
							"query": [
								{
									"key": "query",
									"value": "{{search_value}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Test suite for /stream API.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4b08acb1-23f2-495a-8859-8268f3bb6f39",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a0124087-851e-419e-ade8-1d20fd1cf36f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9ee790c2-62ed-4222-b810-6e9937d3cb4a",
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"  verifyEntryAudit: function(entryAudit, firstPublicDate, lastAnnotationUpdateDate, lastSequenceUpdateDate, entryVersion, sequenceVersion) {",
					"    pm.test(\"entryAudit\", function () {",
					"      utils.verifyNotNull(\"entryAudit\", entryAudit);",
					"      pm.expect(entryAudit, 'is not an object').to.be.an(\"object\");",
					"      pm.expect(entryAudit.firstPublicDate, \"firstPublicDate\").to.eql(firstPublicDate);",
					"      pm.expect(entryAudit.lastAnnotationUpdateDate, \"lastAnnotationUpdateDate\").to.eql(lastAnnotationUpdateDate);",
					"      pm.expect(entryAudit.lastSequenceUpdateDate, \"lastSequenceUpdateDate\").to.eql(lastSequenceUpdateDate);",
					"      pm.expect(entryAudit.entryVersion, \"entryVersion\").to.eql(entryVersion);",
					"      pm.expect(entryAudit.sequenceVersion, \"sequenceVersion\").to.eql(sequenceVersion);",
					"  })},",
					"",
					"  verifySecondaryAccessions: function(secondaryAccessions, accessions) {",
					"    pm.test(\"secondaryAccessions\", function () {",
					"    utils.verifyArrayValues(\"secondaryAccessions\", secondaryAccessions, accessions);",
					"})},",
					"",
					"verifyOrganism: function(organism, scientificName, commonName, taxonId, lineage, evidences) {",
					"    pm.test(\"organism\", function () {",
					"      utils.verifyNotNull(\"organism\", organism);",
					"      pm.expect(organism, 'is not an object').to.be.an(\"object\");",
					"      pm.expect(organism.scientificName, \"scientificName\").to.eql(scientificName);",
					"      pm.expect(organism.commonName, \"commonName\").to.eql(commonName);",
					"      pm.expect(organism.taxonId, \"taxonId\").to.eql(taxonId);  ",
					"      utils.verifyArrayValues(\"lineage\", organism.lineage, lineage);",
					"      pm.expect(organism.evidences, 'is not undefined').to.be.a('undefined');",
					"})},",
					"",
					"verifyProteinName: function(fieldName, proteinName, fullName, shortNames, ecNumbers){",
					"pm.test(fieldName, function () {",
					"      utils.verifyNotNull(fieldName, proteinName);",
					"      pm.expect(proteinName, 'is not an object').to.be.an(\"object\");",
					"      utils.verifyNotNull(\"fieldName\", proteinName.fullName);",
					"      pm.expect(proteinName.fullName, \"fullName\").to.eql(fullName);",
					"      utils.verifyArrayValues(\"shortNames\", proteinName.shortNames, shortNames);",
					"      utils.verifyArrayValues(\"ecNumbers\", proteinName.ecNumbers, ecNumbers);",
					"})",
					"},",
					"// verify results array common things",
					"verifyResults: function(results, expectedPrimaryAccessions){",
					"  pm.test(\"results\", function () {",
					"  utils.verifyArray(\"results\", results);",
					"  // verify primary accession",
					"  let primaryAccessions = results.map(result => result.primaryAccession);",
					"  utils.verifyArrayValues(\"results[*].primaryAccession\", primaryAccessions, expectedPrimaryAccessions);",
					"  // verify entry types",
					"  let entryTypes = results.map(result => result.entryType);",
					"  utils.verifyEntryTypes(\"results[*].entryType\", entryTypes)",
					"  })",
					"},",
					"verifyEntryTypes: function(name, entryTypes){",
					"  utils.verifyArrayValues(name, entryTypes, ['UniProtKB reviewed (Swiss-Prot)', 'UniProtKB unreviewed (TrEMBL)']);",
					"},",
					"verifyArrayValues: function(name, actualValues, expectedValues){",
					"  utils.verifyArray(name, actualValues);",
					"  pm.expect(actualValues, name + ' length mismatch').to.have.lengthOf(expectedValues.length);",
					"  pm.expect(actualValues, name + ' values mismatch').to.have.deep.members(expectedValues);",
					"},",
					"verifyArray: function(name, values){",
					"  utils.verifyNotNull(name, values);",
					"  pm.expect(values, name + ' is not array').to.be.an('array');",
					"},",
					"verifyNotNull: function(name, value){",
					"  pm.expect(value, name + ' is undefined').not.to.be.a('undefined');",
					"  pm.expect(value, name + ' is null').not.to.be.a('null');",
					"}",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "dfd5669e-7f69-4fc7-ae36-fe8cb49d44ce",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "21fe0ede-2a28-4ec9-9c30-a3d55dc5647e",
			"key": "search_value",
			"value": "rnf18"
		},
		{
			"id": "7fde8de1-5379-42a0-a20f-f22054b2065e",
			"key": "accession_list",
			"value": "P0CI25,A6NDI0,A9Q1J6,P12345"
		},
		{
			"id": "92c792e6-639c-4d4b-9b40-ee53474cbede",
			"key": "accession",
			"value": "P12345"
		},
		{
			"id": "870c86a9-bd4d-46a6-9938-ba6def072c75",
			"key": "search_by_gene",
			"value": "gene:p53"
		}
	],
	"protocolProfileBehavior": {}
}